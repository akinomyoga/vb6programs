


------------------------------------------------------------------------------
  VB6 Note
------------------------------------------------------------------------------

UserControl を自分で作るという事。

* 描画処理は UserControl_Paint にかけば良い。
  表示内容の変化があったら UserControl.Refresh() を呼び出す。

* デザイナの UserControl のプロパティがそのまま
  作成しているコントロールのプロパティになるのかと思っていたら違う様だ。
  作成しているコントロールの中に UserControl がある様である。
  従って、プロパティを自分で定義して中の UserControl に橋渡しする必要がある。

  Ref: [[RESOLVED] Custom control - Font and color properties-VBForums](http://www.vbforums.com/showthread.php?463202-RESOLVED-Custom-control-Font-and-color-properties)

* UserControl にプロパティを追加する方法は以下に書かれていた。

  Ref: [properties - Add property to user control in vb6 - Stack Overflow](https://stackoverflow.com/questions/41087947/add-property-to-user-control-in-vb6)

* プロパティを作成する為には以下のような感じにする。

  * 値型のプロパティの場合

    Dim m_Value As Boolean

    Public Property Let Value(ByVal new_Value As Boolean)
        m_Value = new_Value
        PropertyChanged "Value"
    End Property

    Public Property Get Value() As Boolean
        Value = m_Value
    End Property

  * 参照型のプロパティの場合

    参照型と値型でプロパティの作成の仕方が異なる様だ。
    フォントのプロパティ等参照型の場合には以下の様にする。

    Public Property Set Font(ByRef new_Font As StdFont)
        Set UserControl.Font = new_Font
        PropertyChanged "Font"
    End Property

    Public Property Get Font() As StdFont
        Set Font = UserControl.Font
    End Property

    初め値型と同じ様にフォントのプロパティを作成してみたら、
    Wrong number of argauments or invalid property と言った具合のエラーメッセージが出た。

    Ref: [[RESOLVED] User Control Picture Error Problem-VBForums](http://www.vbforums.com/showthread.php?744107-RESOLVED-User-Control-Picture-Error-Problem)

  * 更にデザイナでユーザの設定したプロパティが正しく保存される為に以下の様に記述する。

    Private Sub UserControl_InitProperties()
        m_Value = default_Value
        Set default_Font = UserControl.Font
    End Sub

    Private Sub UserControl_ReadProperties(PropBag As PropertyBag)
        m_Value = PropBag.ReadProperty("Value", default_Value)
        Set UserControl.Font = PropBag.ReadProperty("Font", getDefaultFont())
    End Sub

    Private Sub UserControl_WriteProperties(PropBag As PropertyBag)
        Call PropBag.WriteProperty("Value", m_Value, default_Value)
        Call PropBag.WriteProperty("Font", UserControl.Font, getDefaultFont())
    End Sub


------------------------------------------------------------------------------
  ToDo
------------------------------------------------------------------------------

2019-07-09

* SpinButton の Enabled に対応する
* ToggleButton の Enabled に対応する
* ToggleButton を押している時は Inset にする?

* プロパティを設定する前に前と同じ値になっていないかどうか確認する

* MouseCapture?


------------------------------------------------------------------------------
  Done
------------------------------------------------------------------------------

2019-07-10

* ColorBox の Enabled に対応する
  Enabled に対応しようとしたら無限ループになってしまって全然駄目だ。
  どうも UserControl.Refresh を実行すると Enabled が有効化される?
  しかし UserControl.Refresh を実行しないと表示は更新されない。
  誰かが Enabled に True を設定しているのだろうか。。。

  新しく作成した TestControl で Property Enabled だけ追加してみたが問題は起こらない。
  つまり、ColorButton のコードの方で何か変な事をしている。
  調べたら ForeColor 設定 → Refresh → ForeColor 設定というループになっていた。
  修正した。

2019-07-09

* VB6 の UserControl の ToolBoxBitmap の大きさが分からない。
  21x21 が最大サイズの様であるが 21x21 のファイルを指定するとぼやけてしまう。
  12x12 でもぼやけてしまう。というか黒が白に変換されている?
  16x16 だと下偏が欠けてしまっている。
  因みに昔自分が作った UserControl に設定されている Bitmap は 14x13 の様に見える。

  * 25x25 にしてみたら内容が潰れてしまう。
    13px が 7px に縮小されている。
    変更前 25 23 21 19 17 15 (25x25 BMP 内の大きさ)
    変更後 15 13 13 11 11 7  (実際に表示される大きさ)
    うーん。描画位置にもよるので一概には言えない気がする。
    取り敢えず 15x15 が標準の大きさ?

  * 15x15 にして見たら右端が欠けるという事態になった。
    これは透明色を周囲の色で一番多い物としている為であろう。
    15x15 にして端を黄緑にしてみたらよくなった。
    ハッチ模様も壊れていない。しかし15x16になってしまっている。
    うーん。15x16でやってみたらうまく行った。

  [結論] 15x16 が標準の大きさで周囲で、一番多い色が透明色になる
