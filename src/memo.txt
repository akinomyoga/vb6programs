


------------------------------------------------------------------------------
  VB6 Note
------------------------------------------------------------------------------

2019-07-15

* 描画領域を Clip するには Win32 API を呼び出すしかない。

* AutoRedraw の時は UserControl.hDC はバックバッファの DC を返してくれる。
  途中で一回でも Line や Print 等を呼び出していれば VB の側で
  バックバッファから表への描画は適用してくれる。
  何も呼び出していなければ Refresh を呼び出しておけば良い。
  或いは UserControl.Cls を呼び出せばその場で反映してくれる様だ。

* Long の定数は整数の末尾に & をつける。
  Double の定数は数値の末尾に # をつける。

2019-07-14

* 定期的にチェックする項目

  - 各コントロールでプロパティ一覧での設定
  - 各コントロールのメンバの Private 付け忘れがないか

* Enum 項目一覧をプログラム的に列挙する方法 (一種のリフレクション)
  http://www.vbforums.com/showthread.php?814149-VB6-Look-up-Enum-value-names
  http://hanatyan.sakura.ne.jp/vb60bbs/wforum.cgi?mode=allread&no=16458&page=0

* 標準のボタン (Command) でも Style を Graphical にすれば背景色を描画してくれる。

* 何と ToggleButton は標準の CheckBox で Style を Graphical にすれば実現できた…。

2019-07-07 UserControl を自分で作るという事。

* 描画処理は UserControl_Paint にかけば良い。
  表示内容の変化があったら UserControl.Refresh() を呼び出す。

* デザイナの UserControl のプロパティがそのまま
  作成しているコントロールのプロパティになるのかと思っていたら違う様だ。
  作成しているコントロールの中に UserControl がある様である。
  従って、プロパティを自分で定義して中の UserControl に橋渡しする必要がある。

  Ref: [[RESOLVED] Custom control - Font and color properties-VBForums](http://www.vbforums.com/showthread.php?463202-RESOLVED-Custom-control-Font-and-color-properties)

* UserControl にプロパティを追加する方法は以下に書かれていた。

  Ref: [properties - Add property to user control in vb6 - Stack Overflow](https://stackoverflow.com/questions/41087947/add-property-to-user-control-in-vb6)

* プロパティを作成する為には以下のような感じにする。

  * 値型のプロパティの場合

    Dim m_Value As Boolean

    Public Property Let Value(ByVal new_Value As Boolean)
        m_Value = new_Value
        PropertyChanged "Value"
    End Property

    Public Property Get Value() As Boolean
        Value = m_Value
    End Property

  * 参照型のプロパティの場合

    参照型と値型でプロパティの作成の仕方が異なる様だ。
    フォントのプロパティ等参照型の場合には以下の様にする。

    Public Property Set Font(ByRef new_Font As StdFont)
        Set UserControl.Font = new_Font
        PropertyChanged "Font"
    End Property

    Public Property Get Font() As StdFont
        Set Font = UserControl.Font
    End Property

    初め値型と同じ様にフォントのプロパティを作成してみたら、
    Wrong number of argauments or invalid property と言った具合のエラーメッセージが出た。

    Ref: [[RESOLVED] User Control Picture Error Problem-VBForums](http://www.vbforums.com/showthread.php?744107-RESOLVED-User-Control-Picture-Error-Problem)

  * 更にデザイナでユーザの設定したプロパティが正しく保存される為に以下の様に記述する。

    Private Sub UserControl_InitProperties()
        m_Value = default_Value
        Set default_Font = UserControl.Font
    End Sub

    Private Sub UserControl_ReadProperties(PropBag As PropertyBag)
        m_Value = PropBag.ReadProperty("Value", default_Value)
        Set UserControl.Font = PropBag.ReadProperty("Font", getDefaultFont())
    End Sub

    Private Sub UserControl_WriteProperties(PropBag As PropertyBag)
        Call PropBag.WriteProperty("Value", m_Value, default_Value)
        Call PropBag.WriteProperty("Font", UserControl.Font, getDefaultFont())
    End Sub


------------------------------------------------------------------------------
  ToDo
------------------------------------------------------------------------------

2019-07-12

* KBasic: Spin と Scroll はコード的に似通っている。
  共通部分を抽出してコードを共有する様にできないだろうか。

  これも実行する事に意義を感じられないので放棄するべき。

* やはり色々触ってみて VB6 には限界があるのだという事を感じた。
  というより昔 C# に移行した時の気持ちを思い出したというべきか。

  * 先ず初めに識別子の大文字・小文字の区別がないというのは辛い。

    更に VB6 の IDE の性質として宣言と同じ大文字・小文字に合わせる、
    という物があるが宣言が複数あると他の宣言も一緒に書き換えられてしまう。
    つまり、同じ識別子名は必ず大文字・小文字を合わせなければならないという事。
    特に既に標準のコントロールのプロパティとして存在している X や Y と、
    更に Min や Max 等の識別子名は大文字になってしまう。
    或いは小文字の同名の変数を宣言すると全体が一緒に小文字になってしまう。

  * 名前空間がどうなっているのかがよくわからない。

    取り敢えず Enum に関しては C の Enum と同様にグローバルにも
    値が宣言されてしまうという事。
    更に UserControl はプロジェクトの外に公開できるが、
    モジュールに関してはプロジェクトの外からは見えない?
    クラスに関しては恐らく公開する事ができるのだろうと思うが、
    コントロール用の .ocx にクラスモジュールを追加しても
    外からは見えていない様な気がする。

    計算.vbg において変なコントロールを用意して、
    それによって様々な関数を公開していたのはそういう背景があったのだろう。
    その過程での試行錯誤なんだろうという気がする。

  * クラスの継承の概念はあるのかないのか。

    これは実はあるようにも思われる。
    もしなかったとしても記述が面倒になるのを厭わなければ
    委譲によって継承を実現する事が可能である。

  * オーバーロードができないというのは辛い。

    同じ関数でも Int 版 Long 版 Double 版などが欲しかったりする。
    特に数学関数というか計算用の様々な関数を考えた時に重要である。
    それぞれに別々の名前をつけなければならないというのは辛い。
    これが C# に移行する直接のきっかけになった様に思う。

    実はC言語でも似たような問題があった筈だが余り気にしたことはない。
    それもC言語でライブラリを書こうという事を考えた事がないという事。
    それからライブラリを書くとしても double に制限するなど、
    特定の用途に絞って実装するから余り困らなかったのだという事。
    そもそも汎用的に作ろうという考え自体が誤りなのかもしれない。
    C# や C++ でジェネリクスやテンプレートがあるが、
    実の所、プログラミングにおいてこれが本当に必要なのかというと、
    却ってプログラムを複雑化する原因になっている気がする。
    多少遅くてももっと柔軟な言語にした方が使いやすいのだろうという気がする。


------------------------------------------------------------------------------
  Done
------------------------------------------------------------------------------

2019-07-14

* Progress について。

  文字列の一部を或る色で塗って、
  文字列の他の部分を別の色で塗る方法に関して。
  PictureBox 等を重ねて内部で描画させるという方法もなくはない。
  "％メーター.frm" と称していた物はこれを実践しようとしていた。
  しかし、描画のためだけにウィンドウを4つも生成するのは変な気がする。

  もっと良い方法はないのだろうか。例えば Clip 等ができれば良いのだが。
  UserControl のメンバを見る限りはどうも難しい様な気がする。
  ClipControls というプロパティはあるが、これは部分描画か全体描画か、
  というのを成業する物の様に思われる。
  http://www.gizcollabo.jp/vbtomo/boards/vbqanda_spread_6030.html
  このページを観察すると ClipControls = True になっていると、
  そのコントロールの上に別のコントロールが載っている時に、
  その別のコントロールの上に変な物が描かれてしまわない様にする効果があるらしい。
  ClipControls = False になっていると別のコントロールの上に上書きしてしまう。

  どうもVB6の範囲ではClipを実行する方法はないのではないかという気がする。

  Win32 API に頼らざるを得ないのだろうか。
  何れにしてもよく考えてみれば VB6 は Win 上でしか動かないので、
  まあ Win32 API に依存しても仕方がないのである。
  或いは、既に色々依存しているのだから諦めるのである。

  http://wisdom.sakura.ne.jp/system/winapi/win32/win134.html
  https://www.codeproject.com/Articles/2095/A-Guide-to-WIN32-Clipping-Regions
  http://note.phyllo.net/?eid=1106224

  * https://stackoverflow.com/questions/3478180/correct-usage-of-getcliprgn
    此処で具体的に保存してそれから復元する方法が書かれている。
    これで正しいのか、という質問だがこれで正しいのだろう。
    答えとして SaveDC RestoreDC という関数が紹介されているが overspec な気がする。

  ? 然し、問題は、VB6 で AutoRedraw を使っている時に裏で使っている DC が分からないという事である。
    表面で使っている DC に対して Clip を実行しても意味がないのである。
    http://www016.upp.so-net.ne.jp/garger-studio/gameprog/vb0152.html
    どうもこのページによると AutoRedraw の時は hDC はちゃんとバックバッファの hDC になっている。
    Refresh を呼び出すと実際に画面への描画が実施されるという事らしい。
    というか実は Cls はバックバッファにあるデータを反映させるという関数なのでは?

  ? Long の定数を定義できないと思ったら実は末尾に & をつけると Long の定数になるそうだ。
    https://stackoverflow.com/questions/28162693/const-long-translation-issue-h99ff-with-visual-basic-6-0

* KBasic: ScrollBar も Appearance に対応する。

* 何と今気づいたのだが標準のボタンでも Style を Graphical にすれば
  ちゃんと背景色を使って描画してくれる様になるようだ…。
  →よく見たら押下した時の見た目が異なる。
    Graphical にすると凹んで見える様になっている。
    後枠線の色も異なっている様に見える。

  これにも Appearance で対応した。

* 何れにしても SpinButton に関しては Appearance を設定できる様にしたい。

  その前に Button の Appearance について整理したい。
  Button の状態は何種類あるだろうか。

  先ず押下している状態。これは一種類しかない。
  押下している時には必ず Focus も持っている筈だからである。

  次にボタンを離している状態。何種類かある。
  - 先ず、フォーカスを持っていて離している状態。
  - フォーカスを持っていなくて Hover している状態。
  - フォーカスを持っていて Hover している状態。
  - フォーカスも Hover もない状態。
  うーん。単純に考えると4種類ある事になる。
  どれかとどれかは同じ等という事はないだろうか。
  うーん。ない気がする。

  Hover に関しては実際には Hover Or IsLeftPressed である。
  Focus に関しては HasFocus で判定する。
  Enabled でないという場合には ! Hover && ! Focus と同じ。

* [棄却] Appearance = Groove の時は位置及び高さを補正するべき?
  Groove 以外になった時はまた位置及び高さの調整を元に戻したい。

  そうしないと凹み線が重なったり重ならなかったりして変だ。
  と思ったがやはりよく分からない。調整して前のコントロールと
  被る様にすると、被られた方のコントロールを押しても、
  右の線と左の線が全く変わらない様になってしまって駄目である。
  その様に考えると Groove は他と被らない様にして実装しなければ
  ならないという事になるのだろうか。

  或いは他のコントロールに被る時には上の線及び左の線を省略する
  様に設定を行える様にするなど…。
  他のコントロールに被らない時には位置及び高さをシフトする様にする…。
  或いは Single にしておいて周りに枠線を描くという様にするべき?
  と思ったが 1px だけ被る様になっているという事を考えると、
  Single にすると逆に他のコントロールと隣接している時に駄目である。

  Groove の時にいい感じに処理するというのは、
  寧ろ上のレイヤーで何とか解決するべき事の気がする。
  そもそも何故 VB では 1px ずつ被るように配置するのだろうか…。

* ちらつきがあるのは一旦背景色を描画してから
  改めて表示しているからの様な気がする。
  AutoRedraw をしたらどうなるのか?

  →AutoRedraw で解決できた。

* 各コントロールのマウス関係の処理を統一する?
  これは KControlHelper に実装した。

* SpinButton の大きさはやはり変な気がする。
  他のコントロールと一緒に並べた時にずれて見える。

  高さが奇数の時にはボタン同士を重なり合わせる様にして
  高さを調整するべきではないだろうか。
  →よくなった。簡単な修正だった。

2019-07-13

* 各コントロールでプロパティ一覧での設定

* 各コントロールの Private Sub/Function の設定

* KBasic: ScrollBar として Flat version も作成する。
  Flat な ScrollBar にある機能を観察して便利そうな物があれば追加する。

  VB6 にはクラスの継承の仕組みなどはないのだろうか。
  UserControl から更に派生してという事はできない様なので、
  メンバに機能を委譲する事によって何とか実現する事はできないだろうか。
  検索するとあるようなないような。

  http://www016.upp.so-net.ne.jp/garger-studio/gameprog/vb0084.html
  http://blogs.wankuma.com/rti/archive/2008/01/16/117716.aspx
  http://uno036.starfree.jp/PRGmanual/vb_class/class1.html

  * というか VB6 のコントロール等作っている場合ではないという気がする。
    Flat な version を作ったとして使う人がいるのだろうか?
    或いは自分で使うとしても公開して配布する事も難しい VB6 の
    プログラムを今更作っていく事に意味があるのだろうか。
    その様に考えると取り敢えずこれで完成という事にして、
    このリポジトリは停止するのが適当の様に思われる。

  * 結局辛いので対応に向かってしまう。
    調べてみた所 FlatScrollBar には Appearance というプロパティがあって、
    それで Flat3D 的な物もあるという事が分かった。
    その場合には hover している時に single 3D になるという事。
    所が VB6 で hover というより mouseenter mouseleave を検出する方法がない。
    mousemove を使うにしてもキャプチャでもしていなければならない。

    と思って検索したら親コントロールの mousemove で頑張るか、
    或いはやはりキャプチャして対応するしかない様である。
    キャプチャしていると当然 mousemove 一回分吸収してしまう事になるのには注意する。
    http://hanatyan.sakura.ne.jp/patio/read.cgi?no=248

    ここでもやはりキャプチャを使って実装している。
    https://blogs.yahoo.co.jp/chuo_kobe/27312499.html その1
    https://blogs.yahoo.co.jp/chuo_kobe/27312523.html その2

    でも関係ない事で気になる記述が幾つか在る。
    Attribute Enabled.VB_Description = "..." これは何だろう。
    'MappingInfo=UserControl,UserControl,-1,Enabled
    'MemberInfo=23,0,0,TopLeft 更にプロパティにこの様な記述がある。
    調べてみた。

    * Attribute プロパティ名.VB_UserMemId = 0
      http://note.phyllo.net/?eid=1106050
      これはそのプロパティがそのクラスを何らかの値にキャストする時に
      使われるメンバである事を指定するらしい。
      更に、これは構文上はエラーになるが無視して良いらしい。

      というかVB6の画面でプロシージャ属性というので設定できるらしい。

    * Attribute プロパティ名.VB_ProcData.VB_Invoke_Property = "プロパティページ名;カテゴリ名"
      これはプロパティページでのカテゴリ。
      プロパティページは標準で用意されている物の他に、
      自分で作成した物を利用する事も可能である。

    * Attribute プロパティ名.VB_Description = "説明文"
      これはプロパティページでの説明文

    * MappingInfo のコメントに関しては
      そもそもこれは VB6 のウィザードによって生成される様だ。
      http://www.vbforums.com/showthread.php?141975-How-can-I-give-a-usercontrol-an-Enable-property

  * さておき hover を実装する事にする。
    取り敢えずダミーのコントロールで hover を作ってみる。

    問題点に気づいた…。もし他のコントロールがキャプチャを持っていたら、
    この操作によってそれを奪ってしまう事になる…。
    従って SetCapture する時は既にキャプチャしていたらしない様にする必要がある。

2019-07-12

* KBasic: ScrollBar のアイコン

* KBasic: SpinButton と ScrollBar の Timer にも対応した。
  これで一応 ScrollBar は実装できたのではないだろうか。

* KBasic: 何と VB6 の Integer は 16bit 整数の様だ。
  32bit 整数は Long を使う必要がある。
  後で全体的に Integer から Long に書き換える必要がある。

2019-07-10

* KBasic: プロパティを設定する前に前と同じ値になっていないかどうか確認する [#D0007]

* KBasic: SpinButton の Enabled に対応する [#D0006]

* KBasic: ToggleButton の Enabled に対応する [#D0005]

* KBasic: ToggleButton を押している時は Inset にする? [#D0004]

* KBasic: MouseCapture? [#D0003]

  * 対応しようとしたら double click の後に
    領域外に移動してからボタンを離すとボタンが離れたことを検知できない。

    | 検索して調べてみるが使えそうな物はない。
    | Win API を呼び出して色々しなければならないのだろうか。
    | 調べてみると ControlStyles.StandardDoubleClick という物があるそう。
    | https://docs.microsoft.com/ja-jp/dotnet/api/system.windows.forms.controlstyles?view=netframework-4.8
    | http://wisdom.sakura.ne.jp/system/msnet/msnet_win24.html
    | 
    | これは CreateWindow の Window Style に対応していそう。
    | StandardDoubleClick は 4096 の様である。
    | https://www.vb-helper.com/howto_change_window_style.html によると
    | Window Style の設定には Win32 API を呼び出している。
    | http://hanatyan.sakura.ne.jp/vb6/commandbutton03.htm でもそうしている。
    | 
    | うーん。拡張スタイルもスタイルも見てみたが Double Click に関係ありそうな物はない。
    | https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowlongptra
    | https://docs.microsoft.com/ja-jp/windows/win32/winmsg/window-styles
    | https://docs.microsoft.com/ja-jp/windows/win32/winmsg/extended-window-styles
    | うーん。試しに設定してみたが変化はない。
    | 
    |   % Const GWL_STYLE = -16
    |   % Const GWL_EXSTYLE = -20
    |   % 
    |   % Private Declare Function GetWindowLong Lib "user32" _
    |   %     Alias "GetWindowLongA" (ByVal hwnd As Long, _
    |   %     ByVal nIndex As Long) As Long
    |   % 
    |   % Private Declare Function SetWindowLong Lib "user32" _
    |   %     Alias "SetWindowLongA" (ByVal hwnd As Long, _
    |   %     ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
    |   % 
    |   % 
    |   % Dim style As Long
    |   % style = GetWindowLong(hwnd, GWL_STYLE)
    |   % style = style And Not 4096
    |   % Call SetWindowLong(UserControl.hwnd, GWL_EXSTYLE, style)
    | 
    | http://cya.sakura.ne.jp/vb/MSHFlexGrid_Event.htm
    | ここによると気になる事が書かれている。Click を処理すると DblClick が呼び出されなく為る。
    | しかしこれはグリッドコントロール特有の振る舞いではないだろうか。
    | 
    | http://suvaru.com/pg/sampl/Sample100_20.html
    | ここによると「Visual BasicはMouseDownごとにSetCapture APIを呼び出すが、」と書かれている。
    | つまり、DblClick で SetCapture を呼び出してしまえば良い?
    | →結局これで動く様になった。

    [解決法] Win32 API を呼び出す。
      UserControl_DblClick で SetCapture UserControl.hWnd を呼び出し、
      UserControl_MouseUp で ReleaseCapture を呼び出す。

* KBasic: ColorBox の Enabled に対応する [#D0002]
  Enabled に対応しようとしたら無限ループになってしまって全然駄目だ。
  どうも UserControl.Refresh を実行すると Enabled が有効化される?
  しかし UserControl.Refresh を実行しないと表示は更新されない。
  誰かが Enabled に True を設定しているのだろうか。。。

  新しく作成した TestControl で Property Enabled だけ追加してみたが問題は起こらない。
  つまり、ColorButton のコードの方で何か変な事をしている。
  調べたら ForeColor 設定 → Refresh → ForeColor 設定というループになっていた。
  修正した。

2019-07-09

* KBasic: VB6 の UserControl の ToolBoxBitmap の大きさが分からない。 [#D0001]
  21x21 が最大サイズの様であるが 21x21 のファイルを指定するとぼやけてしまう。
  12x12 でもぼやけてしまう。というか黒が白に変換されている?
  16x16 だと下偏が欠けてしまっている。
  因みに昔自分が作った UserControl に設定されている Bitmap は 14x13 の様に見える。

  * 25x25 にしてみたら内容が潰れてしまう。
    13px が 7px に縮小されている。
    変更前 25 23 21 19 17 15 (25x25 BMP 内の大きさ)
    変更後 15 13 13 11 11 7  (実際に表示される大きさ)
    うーん。描画位置にもよるので一概には言えない気がする。
    取り敢えず 15x15 が標準の大きさ?

  * 15x15 にして見たら右端が欠けるという事態になった。
    これは透明色を周囲の色で一番多い物としている為であろう。
    15x15 にして端を黄緑にしてみたらよくなった。
    ハッチ模様も壊れていない。しかし15x16になってしまっている。
    うーん。15x16でやってみたらうまく行った。

  [結論] 15x16 が標準の大きさで周囲で、一番多い色が透明色になる
